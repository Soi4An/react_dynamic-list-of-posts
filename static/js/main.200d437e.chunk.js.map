{"version":3,"sources":["types/ErrMessage.ts","components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/CommentsList.tsx","utils/fetchClient.ts","components/PostDetails.tsx","api.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["ErrMessage","PostsList","posts","selectedPost","onSetSelectedPost","className","map","post","id","title","type","classNames","onClick","newSelectedPost","Loader","NewCommentForm","name","onSetFormName","email","onSetFormEmail","commentText","onSetCommentText","addComments","isLoadingNewComment","onSetErrorInPostDetails","useState","isErrorName","setIsErrorName","isErrorEmail","setIsErrorEmail","isErrorCommentText","setIsErrorCommentText","onSubmit","event","preventDefault","Empty","trimedName","trim","trimedEmail","trimedCommentText","length","htmlFor","placeholder","value","onChange","newName","target","newEmail","newText","disabled","CommentsList","comments","deleteComments","comment","body","href","BASE_URL","request","url","method","data","options","JSON","stringify","headers","fetch","then","response","ok","Error","json","client","PostDetails","isLoadingComments","setIsLoadingComments","setComments","errorMess","setErrorMess","isShowingForm","setIsShowingForm","formName","setFormName","formEmail","setFormEmail","formText","setFormText","isLoadingAddComment","setIsLoadingAddComment","useEffect","postId","catch","GetComments","finally","commentId","currentComments","filter","deleteComment","DeleteComment","newComment","Math","max","c","addComment","currentComs","AddComment","UserSelector","users","selectedUser","onSetSelectedUser","isShowingUsers","setIsShowingUsers","onBlur","setTimeout","role","user","e","handlerSelectUser","App","setUsers","setSelectedUser","isLoadingPosts","setIsLoadingPosts","setPosts","setSelectedPost","userId","GetPosts","GetUsers","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.200d437e.chunk.js","sourcesContent":["export enum ErrMessage {\n  Empty = '',\n  GetUsers = 'Unable to get users',\n  GetPosts = 'Unable to get posts',\n  GetComments = 'Unable to get comments',\n  AddComment = 'Unable to add new comment',\n  DeleteComment = 'Unable to delete the comment',\n}\n","import classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[],\n  selectedPost: Post | null,\n  onSetSelectedPost: (post: Post | null) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  onSetSelectedPost,\n}) => {\n  const handlerOpenPost = (newSelectedPost: Post) => {\n    return (selectedPost === newSelectedPost)\n      ? onSetSelectedPost(null)\n      : onSetSelectedPost(newSelectedPost);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr key={post.id} data-cy=\"Post\">\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button',\n                    'is-link',\n                    { 'is-light': selectedPost !== post },\n                  )}\n                  onClick={() => handlerOpenPost(post)}\n                >\n                  {selectedPost === post\n                    ? 'Close'\n                    : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { ErrMessage } from '../types/ErrMessage';\n\ntype Props = {\n  name: string,\n  onSetFormName: (name: string) => void,\n  email: string,\n  onSetFormEmail: (email: string) => void,\n  commentText: string,\n  onSetCommentText: (commentText: string) => void,\n  addComments: (name: string, email: string, text: string) => void,\n  isLoadingNewComment: boolean,\n  onSetErrorInPostDetails: (errorMessage: ErrMessage) => void,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  name,\n  onSetFormName,\n  email,\n  onSetFormEmail,\n  commentText,\n  onSetCommentText,\n  addComments,\n  isLoadingNewComment,\n  onSetErrorInPostDetails,\n}) => {\n  const [isErrorName, setIsErrorName] = useState<boolean>(false);\n  const [isErrorEmail, setIsErrorEmail] = useState<boolean>(false);\n  const [isErrorCommentText, setIsErrorCommentText] = useState<boolean>(false);\n\n  const handlerInputName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newName = event.target.value;\n\n    onSetFormName(newName);\n    setIsErrorName(false);\n    onSetErrorInPostDetails(ErrMessage.Empty);\n  };\n\n  const handlerInputEmail = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newEmail = event.target.value;\n\n    onSetFormEmail(newEmail);\n    setIsErrorEmail(false);\n    onSetErrorInPostDetails(ErrMessage.Empty);\n  };\n\n  const handlerChangeTextarea = (\n    event: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    const newText = event.target.value;\n\n    onSetCommentText(newText);\n    setIsErrorCommentText(false);\n    onSetErrorInPostDetails(ErrMessage.Empty);\n  };\n\n  const handlerSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    onSetErrorInPostDetails(ErrMessage.Empty);\n\n    const trimedName = name.trim();\n    const trimedEmail = email.trim();\n    const trimedCommentText = commentText.trim();\n\n    if (trimedName.length < 1\n      || trimedEmail.length < 1\n      || trimedCommentText.length < 1) {\n      if (trimedName.length < 1) {\n        setIsErrorName(true);\n        onSetFormName('');\n      }\n\n      if (trimedEmail.length < 1) {\n        setIsErrorEmail(true);\n        onSetFormEmail('');\n      }\n\n      if (trimedCommentText.length < 1) {\n        setIsErrorCommentText(true);\n        onSetCommentText('');\n      }\n\n      return;\n    }\n\n    addComments(trimedName, trimedEmail, trimedCommentText);\n  };\n\n  const handlerReset = () => {\n    onSetFormName('');\n    onSetFormEmail('');\n    onSetCommentText('');\n\n    setIsErrorName(false);\n    setIsErrorEmail(false);\n    setIsErrorCommentText(false);\n    onSetErrorInPostDetails(ErrMessage.Empty);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handlerSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input', { 'is-danger': isErrorName },\n            )}\n            value={name}\n            onChange={handlerInputName}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isErrorName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isErrorName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input', { 'is-danger': isErrorEmail },\n            )}\n            value={email}\n            onChange={handlerInputEmail}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isErrorEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isErrorEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea', { 'is-danger': isErrorCommentText },\n            )}\n            value={commentText}\n            onChange={handlerChangeTextarea}\n          />\n        </div>\n\n        {isErrorCommentText && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button', 'is-link', { 'is-loading': isLoadingNewComment },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          <button\n            type=\"button\"\n            className={classNames(\n              'button', 'is-link', 'is-light',\n            )}\n            disabled={isLoadingNewComment}\n            onClick={handlerReset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\n\ntype Props = {\n  comments: Comment[],\n  deleteComments: (commentId: number) => void,\n};\n\nexport const CommentsList: React.FC<Props> = ({\n  comments, deleteComments,\n}) => {\n  return (\n    <>\n      <p className=\"title is-4\">Comments:</p>\n\n      {comments.map(comment => {\n        const {\n          id, name, email, body,\n        } = comment;\n\n        return (\n          <article key={id} className=\"message is-small\" data-cy=\"Comment\">\n            <div className=\"message-header\">\n              <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                {name}\n              </a>\n              <button\n                data-cy=\"CommentDelete\"\n                type=\"button\"\n                className=\"delete is-small\"\n                aria-label=\"delete\"\n                onClick={() => deleteComments(id)}\n              >\n                delete button\n              </button>\n            </div>\n\n            <div className=\"message-body\" data-cy=\"CommentBody\">\n              {body}\n            </div>\n          </article>\n        );\n      })}\n    </>\n  );\n};\n","import { Comment } from '../types/Comment';\n\nconst BASE_URL = 'https://mate.academy/students-api';\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: Comment | null = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return fetch(BASE_URL + url, options)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Unable to connect from the server');\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: Comment) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: Comment) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader/Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { ErrMessage } from '../types/ErrMessage';\nimport { CommentsList } from './CommentsList';\nimport { addComment, deleteComment, getComments } from '../api';\n\ntype Props = {\n  selectedPost: Post,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n}) => {\n  const [isLoadingComments, setIsLoadingComments] = useState<boolean>(false);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [errorMess, setErrorMess] = useState<ErrMessage>(ErrMessage.Empty);\n  const [isShowingForm, setIsShowingForm] = useState<boolean>(false);\n  const [formName, setFormName] = useState<string>('');\n  const [formEmail, setFormEmail] = useState<string>('');\n  const [formText, setFormText] = useState<string>('');\n  const [\n    isLoadingAddComment, setIsLoadingAddComment,\n  ] = useState<boolean>(false);\n\n  const { id, title, body } = selectedPost;\n\n  const handlerOpeningForm = () => {\n    setIsShowingForm(true);\n    setErrorMess(ErrMessage.Empty);\n  };\n\n  const addComments = (\n    newName: string,\n    newEmail: string,\n    newText: string,\n  ) => {\n    const newComment = {\n      id: Math.max(...comments.map(c => c.id)) + 1,\n      postId: id,\n      name: newName,\n      email: newEmail,\n      body: newText,\n    };\n\n    setIsLoadingAddComment(true);\n\n    addComment(newComment)\n      .then(comment => {\n        setComments(currentComs => {\n          if (currentComs !== null) {\n            return [...currentComs, comment];\n          }\n\n          return [comment];\n        });\n        setFormText('');\n      })\n      .catch(() => {\n        setErrorMess(ErrMessage.AddComment);\n      })\n      .finally(() => {\n        setIsLoadingAddComment(false);\n      });\n  };\n\n  const deleteComments = (commentId: number) => {\n    setComments(currentComments => currentComments.filter(comment => {\n      return comment.id !== commentId;\n    }));\n    setErrorMess(ErrMessage.Empty);\n\n    deleteComment(commentId)\n      .catch(() => {\n        setComments(comments);\n        setErrorMess(ErrMessage.DeleteComment);\n      });\n  };\n\n  useEffect(() => {\n    setIsShowingForm(false);\n    setErrorMess(ErrMessage.Empty);\n    setFormName('');\n    setFormEmail('');\n    setFormText('');\n\n    if (selectedPost) {\n      setIsLoadingComments(true);\n\n      getComments(selectedPost.id)\n        .then(setComments)\n        .catch(() => setErrorMess(ErrMessage.GetComments))\n        .finally(() => setIsLoadingComments(false));\n    }\n  }, [selectedPost]);\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        {isLoadingComments ? (<Loader />) : (\n          <>\n            <div className=\"block\">\n              {errorMess.length > 1 && (\n                <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                  {errorMess}\n                </div>\n              )}\n\n              {comments.length < 1 && (\n                <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                  No comments yet\n                </p>\n              )}\n\n              {comments.length > 0 && (\n                <CommentsList\n                  comments={comments}\n                  deleteComments={deleteComments}\n                />\n              )}\n\n              {isShowingForm ? (\n                <NewCommentForm\n                  name={formName}\n                  onSetFormName={setFormName}\n                  email={formEmail}\n                  onSetFormEmail={setFormEmail}\n                  commentText={formText}\n                  onSetCommentText={setFormText}\n                  addComments={addComments}\n                  isLoadingNewComment={isLoadingAddComment}\n                  onSetErrorInPostDetails={setErrorMess}\n                />\n              ) : (\n                <button\n                  data-cy=\"WriteCommentButton\"\n                  type=\"button\"\n                  className=\"button is-link\"\n                  onClick={handlerOpeningForm}\n                >\n                  Write a comment\n                </button>\n              )}\n            </div>\n          </>\n        )}\n\n      </div>\n    </div>\n  );\n};\n","import { User } from './types/User';\nimport { Post } from './types/Post';\nimport { client } from './utils/fetchClient';\nimport { Comment } from './types/Comment';\n\nexport const getUsers = () => client.get<User[]>('/users');\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const addComment = (newComment: Comment) => {\n  return client.post<Comment>('/comments', newComment);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  users: User[],\n  selectedUser: User | null,\n  onSetSelectedUser: (state: User | null) => void,\n  onSetSelectedPost: (state: Post | null) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  onSetSelectedUser,\n  onSetSelectedPost,\n}) => {\n  const [isShowingUsers, setIsShowingUsers] = useState(false);\n\n  const handlerSelectUser = (e: React.MouseEvent, user: User) => {\n    e.preventDefault();\n\n    setIsShowingUsers(false);\n    onSetSelectedUser(user);\n    onSetSelectedPost(null);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown', { 'is-active': isShowingUsers },\n      )}\n      onBlur={() => setTimeout(() => setIsShowingUsers(false), 100)}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsShowingUsers(!isShowingUsers)}\n        >\n          {selectedUser === null || selectedUser.name === ''\n            ? (<span>Choose a user</span>)\n            : (<span>{selectedUser.name}</span>)}\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isShowingUsers\n        && (\n          <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n            <div className=\"dropdown-content\">\n              {users.map(user => (\n                <a\n                  key={user.id}\n                  href={`#user-${user.id}`}\n                  className={classNames(\n                    'dropdown-item',\n                    {\n                      'is-active': selectedUser !== null\n                    && selectedUser.id === user.id,\n                    },\n                  )}\n                  onClick={(e) => handlerSelectUser(e, user)}\n                >\n                  {user.name}\n                </a>\n              ))}\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader/Loader';\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { ErrMessage } from './types/ErrMessage';\nimport { getPosts, getUsers } from './api';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [errorMess, setErrorMess] = useState<ErrMessage>(ErrMessage.Empty);\n  const [isLoadingPosts, setIsLoadingPosts] = useState<boolean>(false);\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setIsLoadingPosts(true);\n\n      getPosts(selectedUser.id)\n        .then(setPosts)\n        .catch(() => setErrorMess(ErrMessage.GetPosts))\n        .finally(() => setIsLoadingPosts(false));\n    }\n  }, [selectedUser]);\n\n  useEffect(() => {\n    getUsers()\n      .then(setUsers)\n      .catch(() => setErrorMess(ErrMessage.GetUsers));\n  }, []);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  onSetSelectedUser={setSelectedUser}\n                  onSetSelectedPost={setSelectedPost}\n                />\n              </div>\n\n              {isLoadingPosts ? (<Loader />) : (\n                <div className=\"block\" data-cy=\"MainContent\">\n                  {selectedUser === null && (\n                    <p data-cy=\"NoSelectedUser\">\n                      No user selected\n                    </p>\n                  )}\n\n                  {errorMess.length > 1 && (\n                    <div\n                      className=\"notification is-danger\"\n                      data-cy=\"PostsLoadingError\"\n                    >\n                      {errorMess}\n                    </div>\n                  )}\n\n                  {posts !== null && posts.length < 1 && (\n                    <div\n                      className=\"notification is-warning\"\n                      data-cy=\"NoPostsYet\"\n                    >\n                      No posts yet\n                    </div>\n                  )}\n\n                  {posts !== null && posts.length > 0 && (\n                    <PostsList\n                      posts={posts}\n                      selectedPost={selectedPost}\n                      onSetSelectedPost={setSelectedPost}\n                    />\n                  )}\n                </div>\n              )}\n\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': selectedPost },\n            )}\n          >\n            {selectedPost !== null && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  selectedPost={selectedPost}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}